# Docker Development Rules

## Dockerfile Best Practices
- Use multi-stage builds to reduce final image size
- Use specific base image versions for reproducibility
- Minimize the number of layers by combining RUN commands
- Use .dockerignore to exclude unnecessary files
- Set proper user permissions for security
- Use non-root users when possible

## Frontend Dockerfile
- Use Node.js Alpine for smaller image size
- Build stage: Install dependencies and build the app
- Production stage: Use Nginx to serve static files
- Optimize for production with proper caching headers
- Configure Nginx for React Router (SPA)

## Backend Dockerfile
- Use Python slim image for smaller size
- Install system dependencies before Python packages
- Use requirements.txt for dependency management
- Set proper environment variables
- Expose port 8000 for FastAPI
- Use uvicorn for production server

## Docker Compose
- Define services for frontend, backend, and database
- Use environment variables for configuration
- Set up proper networking between services
- Configure volume mounts for data persistence
- Use health checks for service dependencies
- Set restart policies for production

## Development vs Production
- Use different compose files for dev and prod
- Development: Mount source code as volumes
- Production: Use built images
- Configure different environment variables
- Set up proper logging and monitoring

## Security Considerations
- Use non-root users in containers
- Scan images for vulnerabilities
- Keep base images updated
- Use secrets management for sensitive data
- Implement proper network isolation

## Performance Optimization
- Use multi-stage builds
- Optimize layer caching
- Minimize image size
- Use appropriate base images
- Configure proper resource limits
description:
globs:
alwaysApply: false
---
