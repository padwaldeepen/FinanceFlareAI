# Python Dependency Management and Database Migrations

## Dependency Management
- Use Pipenv or Poetry for modern Python projects
- Pin all dependency versions for reproducible builds
- Separate dev and production dependencies
- Use virtual environments for isolation
- Keep lock files in version control
- Document dependency update procedures

## Pipenv Best Practices
- Use Pipfile for dependency specification
- Generate Pipfile.lock for exact versions
- Separate [packages] and [dev-packages]
- Use specific version constraints
- Document installation commands

## Database Migrations with Alembic
- Use Alembic for SQLAlchemy migrations
- Generate migrations automatically from model changes
- Version control all migration scripts
- Test migrations on development database first
- Include both upgrade and downgrade operations
- Document migration procedures

## Migration Workflow
- Generate migration: `alembic revision --autogenerate -m "Description"`
- Review generated migration script
- Apply migration: `alembic upgrade head`
- Test rollback: `alembic downgrade -1`
- Commit migration files to version control

## Environment Management
- Use .env files for configuration
- Never commit sensitive data
- Use different environments for dev/staging/prod
- Document environment setup procedures

## Security Considerations
- Keep dependencies updated for security patches
- Use dependency scanning tools
- Review new dependencies before adding
- Document security update procedures

## Performance Optimization
- Use connection pooling for database
- Optimize migration scripts for large datasets
- Use bulk operations where possible
- Monitor migration performance

## Testing Migrations
- Test migrations on copy of production data
- Verify data integrity after migrations
- Test rollback procedures
- Include migration tests in CI/CD pipeline
description:
globs:
alwaysApply: false
---
