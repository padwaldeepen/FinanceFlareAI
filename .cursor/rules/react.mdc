# React Development Rules

## Component Structure
- Use functional components with hooks
- Prefer TypeScript for type safety
- Use proper prop interfaces for all components
- Implement proper error boundaries
- Use React.memo for performance optimization when needed

## State Management
- Use React hooks (useState, useEffect, useContext) for local state
- Implement custom hooks for reusable logic
- Use React Query or SWR for server state management
- Avoid prop drilling by using Context API appropriately

## Styling
- Use Tailwind CSS for styling (no blue colors per user preference)
- Implement dark mode support with separate light/dark styles
- Use CSS modules or styled-components for complex styling
- Follow mobile-first responsive design

## Performance
- Implement lazy loading for routes and components
- Use React.lazy and Suspense for code splitting
- Optimize re-renders with useMemo and useCallback
- Implement proper loading states and error handling

## Code Quality
- Use ESLint and Prettier for code formatting
- Write meaningful component and function names
- Add proper JSDoc comments for complex functions
- Implement proper TypeScript types and interfaces

## Testing
- Write unit tests for utility functions
- Implement component testing with React Testing Library
- Test user interactions and accessibility
- Mock external dependencies appropriately
description:
globs:
alwaysApply: false
---
