# Python Development Rules

## Code Style
- Follow PEP 8 style guidelines
- Use type hints for all function parameters and return values
- Use meaningful variable and function names
- Keep functions small and focused on single responsibility
- Use docstrings for all public functions and classes

## FastAPI Best Practices
- Use Pydantic models for request/response validation
- Implement proper error handling with HTTPException
- Use dependency injection for database sessions and auth
- Implement proper CORS configuration
- Use async/await for database operations

## Database
- Use SQLAlchemy ORM for database operations
- Implement proper database migrations with Alembic
- Use relationship loading strategies appropriately
- Implement proper transaction handling
- Use database indexes for performance

## Security
- Hash passwords using bcrypt
- Implement JWT token authentication
- Validate all user inputs
- Use environment variables for sensitive data
- Implement rate limiting for API endpoints

## Error Handling
- Use proper exception handling with try/catch blocks
- Log errors appropriately
- Return meaningful error messages to clients
- Implement proper HTTP status codes
- Use custom exception classes when needed

## Testing
- Write unit tests for all business logic
- Use pytest for testing framework
- Mock external dependencies
- Test both success and error scenarios
- Implement integration tests for API endpoints

## Performance
- Use connection pooling for database connections
- Implement caching where appropriate
- Use async operations for I/O bound tasks
- Monitor and optimize database queries
- Implement proper pagination for large datasets
description:
globs:
alwaysApply: false
---
